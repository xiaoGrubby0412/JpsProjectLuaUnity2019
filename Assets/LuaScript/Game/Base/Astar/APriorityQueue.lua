---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangman.
--- DateTime: 2021/7/16 15:02
---

---@param a ANode
---@param b ANode
local AComparer = function(a, b)
    if a.F < b.F then
        return -1
    elseif a.F == b.F then
        return 0
    else
        return 1
    end
end

---@class APriorityQueue
---@field count number
---@field comparer function
---@field head ANode[]
local APriorityQueue = Class("APriorityQueue")

function APriorityQueue:ctor()
    self.count = 0
    self.comparer = AComparer
    self.head = {}
end

---Push
---@param node ANode
function APriorityQueue:Push(node)
    self.head[self.count] = node
    self:Up(self.count)
    self.count = self.count + 1
    --print("push heap nodeX == " .. node.X .. " nodeY == " .. node.Y .. " nodeG == " .. node.G .. " nodeH == " .. node.H .. " nodeF == " .. node.F)
    --self:PrintHeap()
end

function APriorityQueue:PrintHeap()
    for i = 0, self.count - 1 do
        print("print heap i == " .. i .. " node.X == " .. self.head[i].X .. " nodeY == " .. self.head[i].Y .. " nodeG == " .. self.head[i].G .. " nodeH == " .. self.head[i].H .. " nodeF == " .. self.head[i].F)
    end
end

---Pop
---@return ANode
function APriorityQueue:Pop()
    local node = self:Top()
    self.count = self.count - 1
    self.head[0] = self.head[self.count]
    if self.count > 0 then
        self:Down(0)
    end
    --print("pop heap nodeX == " .. node.X .. " nodeY == " .. node.Y .. " nodeG == " .. node.G .. " nodeH == " .. node.H .. " nodeF == " .. node.F)
    --self:PrintHeap()
    return node
end

---Top
---@return ANode
function APriorityQueue:Top()
    if self.count > 0 then
        return self.head[0]
    end
    print("APriorityQueue == null")
end

function APriorityQueue:Up(n)
    local v = self.head[n]
    local n2 = math.floor((n - 1) / 2)
    while(n > 0 and self.comparer(v, self.head[n2]) < 0) do
        self.head[n] = self.head[n2]
        n = n2
        n2 = math.floor((n2 - 1) / 2)
    end
    self.head[n] = v
end

function APriorityQueue:Down(n)
    local v = self.head[n]
    local n2 = (n * 2) + 1
    while(n2 < self.count) do
        if n2 + 1 < self.count and self.comparer(self.head[n2 + 1], self.head[n2]) < 0 then
            n2 = n2 + 1
        end
        if self.comparer(v, self.head[n2]) <= 0 then
            break
        end
        self.head[n] = self.head[n2]
        n = n2
        n2 = (n2 * 2) + 1
    end
    self.head[n] = v
end

function APriorityQueue:Sort(n)
    if n < 0 then
        print("in AstarV2.Sort n < 0")
    elseif n == 0 then
        self:Down(n)
    else
        local n2 = math.floor((n - 1) / 2)
        if self.comparer(self.head[n], self.head[n2]) < 0 then
            self:Up(n)
        else
            self:Down(n)
        end
    end
end

function APriorityQueue:Clear()
    self.head = {}
    self.count = 0
end

return APriorityQueue