---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangman.
--- DateTime: 2021/7/20 14:35
---

---@class AFractionV2
---@field m_iNumerator number
---@field m_iDenominator number
local AFractionV2 = Class("FractionV2Class")

function AFractionV2:ctor(...)
    local iNumerator, iDenominator = select(1, ...)
    self:Initialize(iNumerator or 0, iDenominator or 1)
end

function AFractionV2:Initialize(iNumerator, iDenominator)
    self.m_iNumerator = iNumerator
    self.m_iDenominator = iDenominator
    self:ReduceFraction()
end 

function AFractionV2:ReduceFraction()
    if self.m_iNumerator == 0 then
        self.m_iDenominator = 1
        return
    end
    
    local iGCD = self:GCD(self.m_iNumerator, self.m_iDenominator)
    self.m_iNumerator = math.floor(self.m_iNumerator / iGCD)
    self.m_iDenominator = math.floor(self.m_iDenominator / iGCD)

    if self.m_iDenominator < 0 then
        self.m_iNumerator = self.m_iNumerator * -1
        self.m_iDenominator = self.m_iDenominator * -1
    end
end

function AFractionV2:GCD(iNo1, iNo2)
    if iNo1 < 0 then iNo1 = -iNo1 end
    if iNo2 < 0 then iNo2 = -iNo2 end

    repeat
        if iNo1 < iNo2 then
            local tmp = iNo1
            iNo1 = iNo2
            iNo2 = tmp
        end
        iNo1 = iNo1 % iNo2
    until(iNo1 == 0)
    return iNo2
end

---Add
---@param frac1 AFractionV2
---@param frac2 AFractionV2
---@return AFractionV2
function AFractionV2.Add(frac1, frac2)
    local iNumerator = frac1.m_iNumerator * frac2.m_iDenominator + frac2.m_iNumerator * frac1.m_iDenominator
    local iDenominator =frac1.m_iDenominator * frac2.m_iDenominator 
    return AFractionV2.New(iNumerator, iDenominator)
end

---Multiply
---@param frac1 AFractionV2
---@param frac2 AFractionV2
---@return AFractionV2
function AFractionV2.Multiply(frac1, frac2)
    local iNumerator = frac1.m_iNumerator * frac2.m_iNumerator
    local iDenominator=frac1.m_iDenominator * frac2.m_iDenominator
    return AFractionV2.New(iNumerator, iDenominator)
end

---Subtract
---@param frac1 AFractionV2
---@param frac2 AFractionV2
---@return AFractionV2
function AFractionV2.Subtract(frac1, frac2)
    local f = AFractionV2.New(-frac2.m_iNumerator, frac2.m_iDenominator)
    return AFractionV2.Add(frac1, f)
end

function AFractionV2:ToDouble()
    return self.m_iNumerator / self.m_iDenominator
end

return AFractionV2
