---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Bing Lau.
--- DateTime: 2021/5/18 19:50
---

ClassType = {
    Class = 1,
    Instance = 2
}

---New
---@param class table
---@return table
function New(class, ...)
    local o = {}
    setmetatable(o, class)
    if o.ctor then
        o:ctor()
    end
    class.__index = class
    return o
end

---@param className string
---@param super any
---@return table
function Class(className, super)
    local superType = type(super)
    local cls
    if superType ~= "function" and superType ~= "table" then
        superType = nil
        super = nil
    end
    
    if superType == "function" or (super and super.__ctype == ClassType.Class) then
        -- inherited from native C++
        cls = {}
        if superType == "table" then
            -- copy fields
            for k, v in pairs(super) do
                cls[k] = v
            end
            cls.__create = super.__create
            cls.super = super
        else
            cls.__create = super
            cls.ctor = function()
            end
        end

        cls.__cname = className
        cls.__ctype = ClassType.Class

        function cls.New(...)
            local instance = cls.__create(...)
            -- copy fields from class to native object
            for k, v in pairs(cls) do
                instance[k] = v
            end
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    else
        -- inherited from lua 
        if super then
            cls = {}
            setmetatable(cls, { __index = super })
            cls.super = super
        else
            cls = { ctor = function()
            end }
        end
        cls.__cname = className
        cls.__ctype = ClassType.Instance
        cls.__index = cls

        function cls.New(...)
            local instance = setmetatable({}, cls)
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    end
    return cls
end

---GetClassName
---@param o Object
---@return string
function GetClassName(o)
    local mt = getmetatable(o)
    if mt and mt.__cname then
        return mt.__cname
    end
    return mt
end

---IsKindOf
---@param o Object
---@param className string
---@return boolean
function IsKindOf(o, className)
    local t = type(o)
    if t == "table" then
        local mt = getmetatable(o)
        if mt.__cname == className then
            return true
        end
    elseif t == "userdata" then
        if tolua.typename(o) == className then
            return true
        end
    end
    return false
end

