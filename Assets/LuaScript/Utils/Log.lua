---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Bing Lau.
--- DateTime: 2021/5/21 16:43
---

local _Debugger = CS.LuaInterface.Debugger
local print     = print
local table = table
local _traceback
local _isEditor = UnityEngine.Application.isEditor

function Log(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.Log(fmt)
end

function LogError(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.LogError(fmt)
end

function Printf(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.Log(fmt)
end

function Printf(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.Log(fmt)
end

function PrintfTraceback(level, fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt, level)
    _Debugger.Log(fmt)
end

function PrintWarning(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.LogWarning(fmt)
end

function PrintError(fmt, ...)
    fmt = string.format(tostring(fmt), ...)
    fmt = _traceback(fmt)
    _Debugger.LogError(fmt)
end

_traceback = function(fmt, level)
    local trace = debug.traceback("", level or 3)
    if not _isEditor then
        return fmt .. trace
    else
        local info = debug.getinfo(level or 3)
        local source_root = string.ends(info.source, ".lua") and info.source or info.source..".lua"
        local currentline = tostring(info.currentline)
        return table.concat({fmt, "\n[", source_root, ":", currentline, "]", trace})
        
        --local line = string.split(trace, "\n")[3]
        --line = string.sub(line, 1, string.find(line, ": ") - 1)
        --return table.concat({fmt, "\n[@", string.trim(line), "]:", trace})
    end
end

---@ 输出值的内容
---@param value Object 要输出的值
---@param desciption string 输出内容前的文字描述
---@param nesting number  输出时的嵌套层级，默认为 3
function Dump(value, desciption, nesting)
    if type(nesting) ~= "number" then nesting = 3 end

    local lookupTable = {}
    local result = {}

    local function _v(v)
        if type(v) == "string" then
            v = "\"" .. v .. "\""
        end
        return tostring(v)
    end

    local traceback = string.split(debug.traceback("", 2), "\n")
    result[1]="dump from: " .. string.trim(traceback[3])

    local function _dump(value, desciption, indent, nest, keylen)
        desciption = desciption or "<var>"
        local spc = ""
        if type(keylen) == "number" then
            spc = string.rep(" ", keylen - string.len(_v(desciption)))
        end
        if type(value) ~= "table" then
            result[#result +1 ] = string.format("%s%s%s = %s", indent, _v(desciption), spc, _v(value))
        elseif lookupTable[value] then
            result[#result +1 ] = string.format("%s%s%s = *REF*", indent, desciption, spc)
        else
            lookupTable[value] = true
            if nest > nesting then
                result[#result +1 ] = string.format("%s%s = *MAX NESTING*", indent, desciption)
            else
                result[#result +1 ] = string.format("%s%s = {", indent, _v(desciption))
                local indent2 = indent.."    "
                local keys = {}
                local keylen = 0
                local values = {}
                for k, v in pairs(value) do
                    keys[#keys + 1] = k
                    local vk = _v(k)
                    local vkl = string.len(vk)
                    if vkl > keylen then keylen = vkl end
                    values[k] = v
                end
                table.sort(keys, function(a, b)
                    if type(a) == "number" and type(b) == "number" then
                        return a < b
                    else
                        return tostring(a) < tostring(b)
                    end
                end)
                for i, k in ipairs(keys) do
                    _dump(values[k], k, indent2, nest + 1, keylen)
                end
                result[#result +1] = string.format("%s}", indent)
            end
        end
    end
    _dump(value, desciption, "- ", 1)
    print(table.concat(result,"\n"))
end