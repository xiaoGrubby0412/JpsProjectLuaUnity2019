---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Bing Lau.
--- DateTime: 2021/5/20 15:33
---

-- @module string
local function checknumber(value)
    return tonumber(value) or 0
end

string._htmlspecialchars_set = {}
string._htmlspecialchars_set["&"] = "&amp;"
string._htmlspecialchars_set["\""] = "&quot;"
string._htmlspecialchars_set["'"] = "&#039;"
string._htmlspecialchars_set["<"] = "&lt;"
string._htmlspecialchars_set[">"] = "&gt;"

-- 将特殊字符转为 HTML 转义符
-- @function [parent=#string] htmlspecialchars
-- @param string input 输入字符串
-- @return string#string  转换结果
--[[
    将特殊字符转为 HTML 转义符
    ~~~ lua
    print(string.htmlspecialchars("<ABC>"))
    -- 输出 &lt;ABC&gt;
    ~~~
]]
function string.htmlspecialchars(input)
    for k, v in pairs(string._htmlspecialchars_set) do
        input = string.gsub(input, k, v)
    end
    return input
end

-- 将 HTML 转义符还原为特殊字符，功能与 string.htmlspecialchars() 正好相反
-- @function [parent=#string] restorehtmlspecialchars
-- @param string input 输入字符串
-- @return string#string  转换结果
--[[
    将 HTML 转义符还原为特殊字符，功能与 string.htmlspecialchars() 正好相反
    ~~~ lua
    print(string.restorehtmlspecialchars("&lt;ABC&gt;"))
    -- 输出 <ABC>
    ~~~
]]
function string.restorehtmlspecialchars(input)
    for k, v in pairs(string._htmlspecialchars_set) do
        input = string.gsub(input, v, k)
    end
    return input
end

-- 将字符串中的 \n 换行符转换为 HTML 标记
-- @function [parent=#string] nl2br
-- @param string input 输入字符串
-- @return string#string  转换结果
--[[
    将字符串中的 \n 换行符转换为 HTML 标记
    ~~~ lua
    print(string.nl2br("Hello\nWorld"))
    -- 输出
    -- Hello<br />World
    ~~~
]]
function string.nl2br(input)
    return string.gsub(input, "\n", "<br />")
end

-- 将字符串中的特殊字符和 \n 换行符转换为 HTML 转移符和标记
-- @function [parent=#string] text2html
-- @param string input 输入字符串
-- @return string#string  转换结果
--[[
    将字符串中的特殊字符和 \n 换行符转换为 HTML 转移符和标记
    ~~~ lua
    print(string.text2html("<Hello>\nWorld"))
    -- 输出
    -- &lt;Hello&gt;<br />World
    ~~~
]]
function string.text2html(input)
    input = string.gsub(input, "\t", "    ")
    input = string.htmlspecialchars(input)
    input = string.gsub(input, " ", "&nbsp;")
    input = string.nl2br(input)
    return input
end

-- 用指定字符或字符串分割输入字符串，返回包含分割结果的数组
-- @function [parent=#string] split
-- @param string input 输入字符串
-- @param string delimiter 分割标记字符或字符串
-- @return array#array  包含分割结果的数组
--[[
    用指定字符或字符串分割输入字符串，返回包含分割结果的数组
    ~~~ lua
    local input = "Hello,World"
    local res = string.split(input, ",")
    -- res = {"Hello", "World"}

    local input = "Hello-+-World-+-Quick"
    local res = string.split(input, "-+-")
    -- res = {"Hello", "World", "Quick"}
    ~~~
]]
function string.split(input, delimiter)
    input = tostring(input)
    delimiter = tostring(delimiter)
    if (delimiter=='') then return false end
    if (input=='') then return {} end
    local pos,arr = 0, {}
    -- for each divider found
    for st,sp in function() return string.find(input, delimiter, pos, true) end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(input, pos))
    return arr
end

-- 去除输入字符串头部的空白字符，返回结果
-- @function [parent=#string] ltrim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.rtrim, string.trim
--[[
    去除输入字符串头部的空白字符，返回结果
    ~~~ lua
    local input = "  ABC"
    print(string.ltrim(input))
    -- 输出 ABC，输入字符串前面的两个空格被去掉了
    ~~~
    空白字符包括：
    -   空格
    -   制表符 \t
    -   换行符 \n
    -   回到行首符 \r
]]
function string.ltrim(input)
    return string.gsub(input, "^[ \t\n\r]+", "")
end

-- 去除输入字符串尾部的空白字符，返回结果
-- @function [parent=#string] rtrim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.ltrim, string.trim
--[[
    去除输入字符串尾部的空白字符，返回结果
    ~~~ lua
    local input = "ABC  "
    print(string.rtrim(input))
    -- 输出 ABC，输入字符串最后的两个空格被去掉了
]]
function string.rtrim(input)
    return string.gsub(input, "[ \t\n\r]+$", "")
end

-- 去掉字符串首尾的空白字符，返回结果
-- @function [parent=#string] trim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.ltrim, string.rtrim
--[[
    去掉字符串首尾的空白字符，返回结果
]]
function string.trim(input)
    input = string.gsub(input, "^[ \t\n\r]+", "")
    return string.gsub(input, "[ \t\n\r]+$", "")
end

-- 将字符串的第一个字符转为大写，返回结果
-- @function [parent=#string] ucfirst
-- @param string input 输入字符串
-- @return string#string  结果
--[[
    将字符串的第一个字符转为大写，返回结果
    ~~~ lua
    local input = "hello"
    print(string.ucfirst(input))
    -- 输出 Hello
    ~~~
]]
function string.ucfirst(input)
    return string.upper(string.sub(input, 1, 1)) .. string.sub(input, 2)
end

local function urlencodechar(char)
    return "%" .. string.format("%02X", string.byte(char))
end

-- 将字符串转换为符合 URL 传递要求的格式，并返回转换结果
-- @function [parent=#string] urlencode
-- @param string input 输入字符串
-- @return string#string  转换后的结果
-- @see string.urldecode
--[[
    将字符串转换为符合 URL 传递要求的格式，并返回转换结果
    ~~~ lua
    local input = "hello world"
    print(string.urlencode(input))
    -- 输出
    -- hello%20world
    ~~~
]]
function string.urlencode(input)
    -- convert line endings
    input = string.gsub(tostring(input), "\n", "\r\n")
    -- escape all characters but alphanumeric, '.' and '-'
    input = string.gsub(input, "([^%w%.%- ])", urlencodechar)
    -- convert spaces to "+" symbols
    return string.gsub(input, " ", "+")
end

-- 将 URL 中的特殊字符还原，并返回结果
-- @function [parent=#string] urldecode
-- @param string input 输入字符串
-- @return string#string  转换后的结果
-- @see string.urlencode
--[[
    将 URL 中的特殊字符还原，并返回结果
    ~~~ lua
    local input = "hello%20world"
    print(string.urldecode(input))
    -- 输出
    -- hello world
    ~~~
]]
function string.urldecode(input)
    input = string.gsub (input, "+", " ")
    input = string.gsub (input, "%%(%x%x)", function(h) return string.char(checknumber(h,16)) end)
    input = string.gsub (input, "\r\n", "\n")
    return input
end

-- 计算 UTF8 字符串的长度，每一个中文算一个字符
-- @function [parent=#string] utf8len
-- @param string input 输入字符串
-- @return integer#integer  长度
--[[
    计算 UTF8 字符串的长度，每一个中文算一个字符
    ~~~ lua
    local input = "你好World"
    print(string.utf8len(input))
    -- 输出 7
    ~~~
]]
function string.utf8len(input)
    local len  = string.len(input)
    local left = len
    local cnt  = 0
    local arr  = {0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc}
    while left ~= 0 do
        local tmp = string.byte(input, -left)
        local i   = #arr
        while arr[i] do
            if tmp >= arr[i] then
                left = left - i
                break
            end
            i = i - 1
        end
        cnt = cnt + 1
    end
    return cnt
end

-- lzh
-- 功能：将字符串拆成单个字符，存在一个table中
function string.utf8tochars(input)
    local list = {}
    local len  = string.len(input)
    local index = 1
    local arr  = {0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc}
    while index <= len do
        local c = string.byte(input, index)
        local offset = 1
        if c < 0xc0 then
            offset = 1
        elseif c < 0xe0 then
            offset = 2
        elseif c < 0xf0 then
            offset = 3
        elseif c < 0xf8 then
            offset = 4
        elseif c < 0xfc then
            offset = 5
        end
        local str = string.sub(input, index, index+offset-1)
        -- print(str)
        index = index + offset
        table.insert(list, {byteNum = offset, char = str})
    end

    return list
end

-- 将数值格式化为包含千分位分隔符的字符串
-- @function [parent=#string] formatnumberthousands
-- @param number num 数值
-- @return string#string  格式化结果
--[[--
    将数值格式化为包含千分位分隔符的字符串
    ~~~ lua
    print(string.formatnumberthousands(1924235))
    -- 输出 1,924,235
    ~~~
]]
function string.formatnumberthousands(num)
    local formatted = tostring(checknumber(num))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end


function string.isEmpty(s)
    return s == nil or s == ''
end

function string.isNotEmpty(s)
    return s ~= nil and s ~= ''
end

function string.starts(String, Start)
    return string.sub(String, 1, string.len(Start)) == Start
end

function string.ends(String, End)
    return End == '' or string.sub(String, -string.len(End)) == End
end

function string.substr(str, start, length)
    if length then
        return string.sub(str, start, start + length - 1)
    else
        return string.sub(str, start)
    end
end

function string.lastIndexOf(str, gStr)
    local i = str:match(".*" .. gStr .. "()")
    if i == nil then
        return -1
    else
        return i - 1
    end
end

---@return Array
function string.splitToNumArray(str, ch)
    ch = ch or '|'
    local strs = string.split(str, ch)
    local nums = Array.New()
    for i = 1, #strs do
        nums[i] = tonumber(strs[i])
    end
    return nums
end

--- 用分号分隔
---@return Array
function string.splitToNumArrayWithSemicolon(str)
    return string.splitToNumArray(str,';')
end

function string.splitToStrArray(str, ch)
    ch = ch or '|'
    local strs = string.split(str, ch)
    local nums = Array.New()
    for i = 1, #strs do
        nums[i] = strs[i];
    end
    return nums
end

function string.splitToNumArray2(str, ch1, ch2)
    ch1 = ch1 or '|'
    ch2 = ch2 or ';'
    local strs = string.split(str, ch1)
    local nums = Array.New()
    for i = 1, #strs do
        nums[i] = string.splitToNumArray(strs[i], ch2)
    end
    return nums
end
function string.splitToStrArray2(str, ch1, ch2)
    ch1 = ch1 or '|'
    ch2 = ch2 or ';'
    local strs = string.split(str, ch1)
    local s = Array.New()
    for i = 1, #strs do
        s[i] = string.splitToStrArray(strs[i], ch2)
    end
    return s
end
--- 字符串替换一次
function string.replace(str, value, replace)
    local b, e = string.find(str, tostring(value), 1, true)
    if b == nil then
        return str
    else
        return table.concat({string.sub(str, 1, b - 1), tostring(replace), string.sub(str, e + 1)})
    end
end

function string.replaceAll()
    error("no implement")
end

function string.formatCSharp(format, arg1, ...)
    if arg1 == nil then
        return format
    end
    return System.String.Format(format, arg1, ...)
end

function string.formatCSharpByArray(format, array)
    return System.String.Format(format, table.unpack(array))
end

function string.IsNegative( str )
    return #str > 1 and string.sub( str, 1, 1 ) == "-"
end

function string.IsCharNumber( str )
    if not str then
        return false
    end

    if string.byte( str ) >= 48 and string.byte( str ) <= 57 then
        return true
    else
        return false
    end
end

function string.IsNumber( str )
    if not str then
        return false
    end
    local start = 1
    if string.IsNegative( str ) then
        start = 2
    end
    for i = start, string.len(str) do
        if string.IsCharNumber( string.sub( str, i, i ) ) == false then
            return false
        end
    end
    return true
end